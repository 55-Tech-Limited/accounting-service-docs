"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2698],{165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>B,contentTitle:()=>O,default:()=>I,frontMatter:()=>q,metadata:()=>a,toc:()=>P});const a=JSON.parse('{"id":"guides/getting-started","title":"Getting Started","description":"This guide will take you through the journey of managing users, accounts, and transactions within your betting application using our API","source":"@site/docs/guides/getting-started.mdx","sourceDirName":"guides","slug":"/guides/getting-started","permalink":"/accounting-service-docs/docs/guides/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/55-Tech-Limited/accounting-service-docs/tree/main/docs/guides/getting-started.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"This guide will take you through the journey of managing users, accounts, and transactions within your betting application using our API"},"sidebar":"documentationSidebar","previous":{"title":"Guides","permalink":"/accounting-service-docs/docs/category/guides"},"next":{"title":"User Management","permalink":"/accounting-service-docs/docs/guides/user-management"}}');var r=t(4848),s=t(8453),i=t(6540),o=t(4164),c=t(5627),u=t(6347),l=t(372),d=t(604),h=t(1861),p=t(8749);function g(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function f(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return g(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,h.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,u.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=f(e),[s,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[c,u]=m({queryString:t,groupId:a}),[d,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,p.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),g=(()=>{const e=c??d;return _({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!_({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var y=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:i}=e;const u=[],{blockElementScrollPositionUntilNextRender:l}=(0,c.a_)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),r=i[t].value;r!==a&&(l(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{u.push(e)},onKeyDown:h,onClick:d,...s,className:(0,o.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function k(e){const n=b(e);return(0,r.jsxs)("div",{className:(0,o.A)("tabs-container",j.tabList),children:[(0,r.jsx)(w,{...n,...e}),(0,r.jsx)(x,{...n,...e})]})}function A(e){const n=(0,y.A)();return(0,r.jsx)(k,{...e,children:g(e.children)},String(n))}const v={tabItem:"tabItem_Ymn6"};function T(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(v.tabItem,a),hidden:t,children:n})}const q={sidebar_position:2,description:"This guide will take you through the journey of managing users, accounts, and transactions within your betting application using our API"},O="Getting Started",B={},P=[{value:"Setting Up Your Betting Business",id:"setting-up-your-betting-business",level:2},{value:"Creating an Account",id:"creating-an-account",level:3},{value:"Authentication",id:"authentication",level:2},{value:"1. Token Authentication",id:"1-token-authentication",level:3},{value:"2. API Key Authentication",id:"2-api-key-authentication",level:3},{value:"Creating a User",id:"creating-a-user",level:2},{value:"Flow of Creating a User",id:"flow-of-creating-a-user",level:3},{value:"Fund User Account",id:"fund-user-account",level:2},{value:"Fund User Account",id:"fund-user-account-1",level:3},{value:"Check User Balance",id:"check-user-balance",level:3},{value:"Flow of Funding a User Account and Checking Balance",id:"flow-of-funding-a-user-account-and-checking-balance",level:3},{value:"Placing a Bet Offer",id:"placing-a-bet-offer",level:2},{value:"Placing a Bet Offer",id:"placing-a-bet-offer-1",level:3},{value:"Viewing Open Bet Offers",id:"viewing-open-bet-offers",level:2},{value:"Viewing Open Bet Offers",id:"viewing-open-bet-offers-1",level:3},{value:"Accepting Bet Offers",id:"accepting-bet-offers",level:2},{value:"Accepting Bet Offers",id:"accepting-bet-offers-1",level:3},{value:"Flow of Placing a Bet Offer, Viewing Open Bet Offers, and Accepting Bet Offers",id:"flow-of-placing-a-bet-offer-viewing-open-bet-offers-and-accepting-bet-offers",level:3},{value:"Update Wager Outcome",id:"update-wager-outcome",level:2},{value:"Update Wager Outcome",id:"update-wager-outcome-1",level:3},{value:"Get Bet History",id:"get-bet-history",level:2},{value:"Get Bet History",id:"get-bet-history-1",level:3},{value:"Flow of Updating Wager Outcome and Getting Bet History",id:"flow-of-updating-wager-outcome-and-getting-bet-history",level:3}];function U(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsx)(n.p,{children:"Welcome to the accounting service API documentation. This guide will take you through the journey of managing users, accounts, and transactions within your betting application using our API. Let's get started!"}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-your-betting-business",children:"Setting Up Your Betting Business"}),"\n",(0,r.jsx)(n.p,{children:"Imagine you are the owner of a new betting platform, and you need to set up an account to manage your finances and bet settlements. The first step is to create an account."}),"\n",(0,r.jsx)(n.h3,{id:"creating-an-account",children:"Creating an Account"}),"\n",(0,r.jsx)(n.p,{children:"To create an account, you need to send a POST request to our API with your betting business details. Here's how you can do it using different clients:"}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "$baseUrl/api/auth/register/account" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "name": "My Betting Business",\n    "email": "owner@mybetting.com",\n    "password": "secure_password_here"\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const createAccount = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/api/auth/register/account`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: 'My Betting Business',\n        email: 'owner@mybetting.com',\n        password: 'secure_password_here'\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Account created:', data);\n  } catch (error) {\n    console.error('Error creating account:', error);\n  }\n};\n\ncreateAccount();\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct AccountRequest {\nname: String,\nemail: String,\npassword: String,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    let account_request = AccountRequest {\n        name: "My Betting Business".to_string(),\n        email: "owner@mybetting.com".to_string(),\n        password: "secure_password_here".to_string(),\n    };\n\n    let response = client\n        .post(&format!("{}/api/auth/register/account", baseUrl))\n        .json(&account_request)\n        .send()\n        .await?;\n\n    println!("Response: {:?}", response.json::<serde_json::Value>().await?);\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful creation, the API will respond with your account details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "message": "Account created successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"Before creating users or performing other operations, you need to authenticate your account. There are two methods for authentication:"}),"\n",(0,r.jsx)(n.h3,{id:"1-token-authentication",children:"1. Token Authentication"}),"\n",(0,r.jsx)(n.p,{children:"You can log in with your account credentials to obtain a token:"}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "$baseUrl/api/auth/login/account" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "email": "owner@mybetting.com",\n    "password": "secure_password_here"\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const loginAccount = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/api/auth/login/account`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: 'owner@mybetting.com',\n        password: 'secure_password_here'\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Login successful:', data);\n    \n    // Store the token for future requests\n    const token = data.data.token;\n    return token;\n  } catch (error) {\n    console.error('Error logging in:', error);\n  }\n};\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct LoginRequest {\nemail: String,\npassword: String,\n}\n\n#[derive(Deserialize)]\nstruct LoginResponse {\ndata: LoginData,\nmessage: String,\n}\n\n#[derive(Deserialize)]\nstruct LoginData {\ntoken: String,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    let login_request = LoginRequest {\n        email: "owner@mybetting.com".to_string(),\n        password: "secure_password_here".to_string(),\n    };\n\n    let response = client\n        .post(&format!("{}/api/auth/login/account", baseUrl))\n        .json(&login_request)\n        .send()\n        .await?;\n\n    let login_response: LoginResponse = response.json().await?;\n    println!("Login successful: {}", login_response.message);\n    println!("Token: {}", login_response.data.token);\n\n    // Store the token for future requests\n    let token = login_response.data.token;\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The API will respond with a token:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": {\n  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."\n},\n"message": "Logged into account successfully"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This token should be included as a Bearer token in the Authorization header for all subsequent requests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-api-key-authentication",children:"2. API Key Authentication"}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, you can generate API keys for more secure, long-term authentication:"}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# First, log in to get a token\ntoken=$(curl -X POST "$baseUrl/api/auth/login/account" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "email": "owner@mybetting.com",\n    "password": "secure_password_here"\n  }\' | jq -r \'.data.token\')\n\n# Then use the token to generate API keys\ncurl -X POST "$baseUrl/api/auth/account/generate-keys" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json"\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const generateApiKeys = async (token) => {\n  try {\n    const response = await fetch(`${baseUrl}/api/auth/account/generate-keys`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    const data = await response.json();\n    console.log('API keys generated:', data);\n    \n    // Store the API keys for future requests\n    const { api_key, api_secret, base64_encoded } = data.data;\n    return { api_key, api_secret, base64_encoded };\n  } catch (error) {\n    console.error('Error generating API keys:', error);\n  }\n};\n\n// Usage\nconst getAuthentication = async () => {\n  const token = await loginAccount();\n  const apiKeys = await generateApiKeys(token);\n  \n  // Now you can use either token or apiKeys for authentication\n  return { token, apiKeys };\n};\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Deserialize)]\nstruct ApiKeysResponse {\ndata: ApiKeys,\nmessage: String,\n}\n\n#[derive(Deserialize)]\nstruct ApiKeys {\napi_key: String,\napi_secret: String,\nbase64_encoded: String,\n}\n\nasync fn generate_api_keys(client: &Client, base_url: &str, token: &str)\n-> Result<ApiKeys, Box<dyn std::error::Error>> {\n\n    let response = client\n        .post(&format!("{}/api/auth/account/generate-keys", base_url))\n        .header("Authorization", format!("Bearer {}", token))\n        .header("Content-Type", "application/json")\n        .send()\n        .await?;\n\n    let api_keys_response: ApiKeysResponse = response.json().await?;\n    println!("API keys generated: {}", api_keys_response.message);\n\n    Ok(api_keys_response.data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n// First login to get a token (reusing previous login code)\n// ...\n\n    // Then generate API keys\n    let api_keys = generate_api_keys(&client, baseUrl, &token).await?;\n    println!("API Key: {}", api_keys.api_key);\n    println!("API Secret: {}", api_keys.api_secret);\n    println!("Base64 Encoded: {}", api_keys.base64_encoded);\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The API will respond with your API keys:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": {\n  "api_key": "jk8sa7dfg98s7df98g7sdfg87",\n  "api_secret": "8sd7fg8sd7fg8sd7f98gs7df98g",\n  "base64_encoded": "ams4c2E3ZGZnOThzN2RmOThnN3NkZmc4Nzo4c2Q3Zmc4c2Q3Zmc4c2Q3Zjk4Z3M3ZGY5OGc="\n},\n"message": "Api keys generated successfully"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can use these API keys in one of two ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Using the ",(0,r.jsx)(n.code,{children:"base64_encoded"})," value directly:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Authorization: Basic ams4c2E3ZGZnOThzN2RmOThnN3NkZmc4Nzo4c2Q3Zmc4c2Q3Zmc4c2Q3Zjk4Z3M3ZGY5OGc=\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Using the ",(0,r.jsx)(n.code,{children:"api_key"})," as username and ",(0,r.jsx)(n.code,{children:"api_secret"})," as password for Basic Auth."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-user",children:"Creating a User"}),"\n",(0,r.jsxs)(n.p,{children:["Once you have authenticated, you can create users who will be placing bets on your platform. To create a user, you need to send a POST request to our API with the user's details. The ",(0,r.jsx)(n.code,{children:"reference"})," field is optional and will be generated if not provided. The ",(0,r.jsx)(n.code,{children:"preferences"})," field is also optional."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X POST "$baseUrl/api/account/user" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "reference": "danny_user",  # Optional\n    "name": "User 3",\n    "preferences": {}  # Optional\n  }\'\n  \n# Or using API key authentication\ncurl -X POST "$baseUrl/api/account/user" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "reference": "danny_user",  # Optional\n    "name": "User 3",\n    "preferences": {}  # Optional\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const createUser = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/account/user`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        reference: 'danny_user', // Optional\n        name: 'User 3',\n        preferences: {} // Optional\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('User created:', data);\n  } catch (error) {\n    console.error('Error creating user:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\ncreateUser(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct UserRequest {\nreference: Option<String>,\nname: String,\npreferences: Option<serde_json::Value>,\n}\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn create_user(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .post(&format!("{}/api/account/user", base_url))\n        .header("Content-Type", "application/json");\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let user_request = UserRequest {\n        reference: Some("danny_user".to_string()), // Optional\n        name: "User 3".to_string(),\n        preferences: Some(serde_json::json!({})), // Optional\n    };\n\n    let response = request_builder\n        .json(&user_request)\n        .send()\n        .await?;\n\n    let user_data = response.json::<serde_json::Value>().await?;\n    println!("User created: {:?}", user_data);\n\n    Ok(user_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Create user with token\n    let auth = AuthMethod::Token(token);\n    let user_data = create_user(&client, baseUrl, &auth).await?;\n\n    // Or create user with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let user_data = create_user(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful creation, the API will respond with the user's details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "data": {\n        "id": 1,\n        "reference": "a1_user_FclirLc2MJecJqsi"\n    },\n    "message": "User created successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"flow-of-creating-a-user",children:"Flow of Creating a User"}),"\n",(0,r.jsx)(n.p,{children:"Here is a visual representation of the flow for creating a user:"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant API\n    Client->>API: POST /api/auth/register/account\n    API--\x3e>Client: { "id": 1234, "name": "My Betting Business", ... }\n    Client->>API: POST /api/auth/login/account\n    API--\x3e>Client: { "data": { "token": "token" }, ... }\n    Note over Client,API: Optional: Generate API keys\n    Client->>API: POST /api/auth/account/generate-keys\n    API--\x3e>Client: { "data": { "api_key": "key", "api_secret": "secret", ... }, ... }\n    Client->>API: POST /api/account/user (with auth)\n    API--\x3e>Client: { "name": "User 3", "preferences": {} }'}),"\n",(0,r.jsx)(n.p,{children:"This diagram shows the complete sequence of API calls to create an account, authenticate, and then create a user."}),"\n",(0,r.jsx)(n.h2,{id:"fund-user-account",children:"Fund User Account"}),"\n",(0,r.jsxs)(n.p,{children:["To fund a user account, you need to send a POST request to our API with the amount and either the ",(0,r.jsx)(n.code,{children:"user_id"})," or ",(0,r.jsx)(n.code,{children:"user_reference"}),". This request must be authenticated, either by token or API key."]}),"\n",(0,r.jsx)(n.h3,{id:"fund-user-account-1",children:"Fund User Account"}),"\n",(0,r.jsxs)(n.p,{children:["To fund a user account, you need to send a POST request to the ",(0,r.jsx)(n.code,{children:"/api/transactions/fund-user/"})," endpoint with the amount and either the ",(0,r.jsx)(n.code,{children:"user_id"})," or ",(0,r.jsx)(n.code,{children:"user_reference"}),"."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X POST "$baseUrl/api/transactions/fund-user/" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "amount": 1000,\n    "user_id": 1\n    // "user_reference": "a1_user_dkjH6xmZzHHHgz5M"  # Optional\n  }\'\n  \n# Or using API key authentication\ncurl -X POST "$baseUrl/api/transactions/fund-user/" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "amount": 1000,\n    "user_id": 1\n    // "user_reference": "a1_user_dkjH6xmZzHHHgz5M"  # Optional\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const fundUserAccount = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/transactions/fund-user/`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        amount: 1000,\n        user_id: 1\n        // user_reference: 'a1_user_dkjH6xmZzHHHgz5M'  // Optional\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Account funded:', data);\n  } catch (error) {\n    console.error('Error funding account:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\nfundUserAccount(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct FundUserRequest {\namount: u32,\nuser_id: Option<u32>,\nuser_reference: Option<String>,\n}\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn fund_user_account(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .post(&format!("{}/api/transactions/fund-user/", base_url))\n        .header("Content-Type", "application/json");\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let fund_user_request = FundUserRequest {\n        amount: 1000,\n        user_id: Some(1),\n        user_reference: None, // Optional\n    };\n\n    let response = request_builder\n        .json(&fund_user_request)\n        .send()\n        .await?;\n\n    let fund_data = response.json::<serde_json::Value>().await?;\n    println!("Account funded: {:?}", fund_data);\n\n    Ok(fund_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Fund user account with token\n    let auth = AuthMethod::Token(token);\n    let fund_data = fund_user_account(&client, baseUrl, &auth).await?;\n\n    // Or fund user account with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let fund_data = fund_user_account(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful funding, the API will respond with the transaction details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": {\n  "user_id": 1,\n  "account_id": 1,\n  "reference": "TX_m9O57HPundloKRBnky96CHCcf-_z2xI5lX77DQx8w8AERwdB",\n  "amount": 1000,\n  "description": "Balance funded",\n  "transaction_type": "credit",\n  "transaction_source": "funding",\n  "created_at": "2025-03-06T02:35:27.028Z"\n},\n"message": "Account funded successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"check-user-balance",children:"Check User Balance"}),"\n",(0,r.jsxs)(n.p,{children:["To check a user's balance, you can use either the ",(0,r.jsx)(n.code,{children:"user_id"})," or ",(0,r.jsx)(n.code,{children:"user_reference"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"/api/account/user/:userId"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"/api/account/user/:reference/reference"})}),"\n"]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using user_id\ncurl -X GET "$baseUrl/api/account/user/1" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json"\n  \n# Or using user_reference\ncurl -X GET "$baseUrl/api/account/user/a1_user_FclirLc2MJecJqsi/reference" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json"\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const checkUserBalance = async (auth, identifier, isReference = false) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const url = isReference \n      ? `${baseUrl}/api/account/user/${identifier}/reference`\n      : `${baseUrl}/api/account/user/${identifier}`;\n    \n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    const data = await response.json();\n    console.log('User balance:', data);\n  } catch (error) {\n    console.error('Error checking user balance:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\ncheckUserBalance(auth, 1); // Using user_id\n// checkUserBalance(auth, 'a1_user_FclirLc2MJecJqsi', true); // Using user_reference\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn check_user_balance(client: &Client, base_url: &str, auth: &AuthMethod, identifier: &str, is_reference: bool)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .get(&format!("{}/api/account/user/{}", base_url, identifier));\n\n    if is_reference {\n        request_builder = client\n            .get(&format!("{}/api/account/user/{}/reference", base_url, identifier));\n    }\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let response = request_builder\n        .header("Content-Type", "application/json")\n        .send()\n        .await?;\n\n    let user_data = response.json::<serde_json::Value>().await?;\n    println!("User balance: {:?}", user_data);\n\n    Ok(user_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Check user balance with user_id\n    let auth = AuthMethod::Token(token);\n    let user_data = check_user_balance(&client, baseUrl, &auth, "1", false).await?;\n\n    // Or check user balance with user_reference\n    // let user_data = check_user_balance(&client, baseUrl, &auth, "a1_user_FclirLc2MJecJqsi", true).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The API will respond with the user's details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": {\n  "id": 1,\n  "account_id": 1,\n  "reference": "a1_user_FclirLc2MJecJqsi",\n  "name": "User 3",\n  "role": "user",\n  "preferences": null,\n  "balance": 1000,\n  "exposure": 0\n},\n"message": "User fetched successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"flow-of-funding-a-user-account-and-checking-balance",children:"Flow of Funding a User Account and Checking Balance"}),"\n",(0,r.jsx)(n.p,{children:"Here is a visual representation of the flow for funding a user account and checking the balance:"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant API\n    Client->>API: POST /api/transactions/fund-user/\n    API--\x3e>Client: { "data": { "user_id": 1, "amount": 1000, ... }, "message": "Account funded successfully" }\n    Client->>API: GET /api/account/user/:userId\n    API--\x3e>Client: { "data": { "id": 1, "balance": 1000, ... }, "message": "User fetched successfully" }\n    Note over Client,API: Or use user_reference\n    Client->>API: GET /api/account/user/:reference/reference\n    API--\x3e>Client: { "data": { "id": 1, "balance": 1000, ... }, "message": "User fetched successfully" }'}),"\n",(0,r.jsx)(n.h2,{id:"placing-a-bet-offer",children:"Placing a Bet Offer"}),"\n",(0,r.jsx)(n.p,{children:"To place a bet offer, you need to send a POST request to our API with the bet details. This request must be authenticated, either by token or API key."}),"\n",(0,r.jsx)(n.h3,{id:"placing-a-bet-offer-1",children:"Placing a Bet Offer"}),"\n",(0,r.jsxs)(n.p,{children:["To place a bet offer, you need to send a POST request to the ",(0,r.jsx)(n.code,{children:"/api/bets/make-offer"})," endpoint with the bet details. You can either use the ",(0,r.jsx)(n.code,{children:"user_id"})," or ",(0,r.jsx)(n.code,{children:"user_reference"})," to make a bet offer."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X POST "$baseUrl/api/bets/make-offer" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "requesting_user_reference": "a1_user_dkjH6xmZzHHHgz5M",\n    "requesting_odds": 3,\n    "requesting_amount": 300,\n    "wager_reference": "wager-4"\n  }\'\n  \n# Or using API key authentication\ncurl -X POST "$baseUrl/api/bets/make-offer" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "requesting_user_reference": "a1_user_dkjH6xmZzHHHgz5M",\n    "requesting_odds": 3,\n    "requesting_amount": 300,\n    "wager_reference": "wager-4"\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const placeBetOffer = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/bets/make-offer`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        requesting_user_reference: 'a1_user_dkjH6xmZzHHHgz5M',\n        requesting_odds: 3,\n        requesting_amount: 300,\n        wager_reference: 'wager-4'\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Bet offer placed:', data);\n  } catch (error) {\n    console.error('Error placing bet offer:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\nplaceBetOffer(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct BetOfferRequest {\nrequesting_user_reference: String,\nrequesting_odds: f32,\nrequesting_amount: u32,\nwager_reference: String,\n}\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn place_bet_offer(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .post(&format!("{}/api/bets/make-offer", base_url))\n        .header("Content-Type", "application/json");\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let bet_offer_request = BetOfferRequest {\n        requesting_user_reference: "a1_user_dkjH6xmZzHHHgz5M".to_string(),\n        requesting_odds: 3.0,\n        requesting_amount: 300,\n        wager_reference: "wager-4".to_string(),\n    };\n\n    let response = request_builder\n        .json(&bet_offer_request)\n        .send()\n        .await?;\n\n    let bet_data = response.json::<serde_json::Value>().await?;\n    println!("Bet offer placed: {:?}", bet_data);\n\n    Ok(bet_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Place bet offer with token\n    let auth = AuthMethod::Token(token);\n    let bet_data = place_bet_offer(&client, baseUrl, &auth).await?;\n\n    // Or place bet offer with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let bet_data = place_bet_offer(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful bet offer, the API will respond with the bet details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": {\n  "bet_id": 1,\n  "wager_reference": "wager-4",\n  "wager_id": 1\n},\n"message": "Bet offer placed successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"viewing-open-bet-offers",children:"Viewing Open Bet Offers"}),"\n",(0,r.jsx)(n.p,{children:"To view open bet offers, you need to send a GET request to our API. This request must be authenticated, either by token or API key."}),"\n",(0,r.jsx)(n.h3,{id:"viewing-open-bet-offers-1",children:"Viewing Open Bet Offers"}),"\n",(0,r.jsxs)(n.p,{children:["To view open bet offers, you need to send a GET request to the ",(0,r.jsx)(n.code,{children:"/api/bets/open-bets"})," endpoint."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X GET "$baseUrl/api/bets/open-bets" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json"\n  \n# Or using API key authentication\ncurl -X GET "$baseUrl/api/bets/open-bets" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json"\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const viewOpenBetOffers = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/bets/open-bets`, {\n      method: 'GET',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    const data = await response.json();\n    console.log('Open bet offers:', data);\n  } catch (error) {\n    console.error('Error viewing open bet offers:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\nviewOpenBetOffers(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn view_open_bet_offers(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .get(&format!("{}/api/bets/open-bets", base_url));\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let response = request_builder\n        .header("Content-Type", "application/json")\n        .send()\n        .await?;\n\n    let open_bets_data = response.json::<serde_json::Value>().await?;\n    println!("Open bet offers: {:?}", open_bets_data);\n\n    Ok(open_bets_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // View open bet offers with token\n    let auth = AuthMethod::Token(token);\n    let open_bets_data = view_open_bet_offers(&client, baseUrl, &auth).await?;\n\n    // Or view open bet offers with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let open_bets_data = view_open_bet_offers(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The API will respond with the open bet offers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": [\n  {\n    "id": 1,\n    "account_id": 1,\n    "offer_status": "requesting",\n    "wager_id": 1,\n    "wager_reference": "wager-4",\n    "requesting_user_id": 1,\n    "requesting_user_reference": "a1_user_FclirLc2MJecJqsi",\n    "requesting_odds": 3,\n    "requesting_amount": 300,\n    "created_at": "2025-03-06T02:49:52.080Z"\n  }\n],\n"per_page": 20,\n"page": 1,\n"total": 1,\n"from": 1,\n"to": 1,\n"last_page": 1,\n"total_requesting_amount": 300\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"accepting-bet-offers",children:"Accepting Bet Offers"}),"\n",(0,r.jsx)(n.p,{children:"To accept a bet offer, you need to send a POST request to our API with the bet offer details. This request must be authenticated, either by token or API key."}),"\n",(0,r.jsx)(n.h3,{id:"accepting-bet-offers-1",children:"Accepting Bet Offers"}),"\n",(0,r.jsxs)(n.p,{children:["To accept a bet offer, you need to send a POST request to the ",(0,r.jsx)(n.code,{children:"/api/bets/accept-offer"})," endpoint with the bet offer details. The ",(0,r.jsx)(n.code,{children:"requesting_user_id"}),", ",(0,r.jsx)(n.code,{children:"requesting_user_reference"}),", and ",(0,r.jsx)(n.code,{children:"meta"})," are optional. If they are not provided, the system will determine the bets to be accepted. To define the accepting user, use either the ",(0,r.jsx)(n.code,{children:"accepting_user_id"})," or the ",(0,r.jsx)(n.code,{children:"accepting_user_reference"}),"."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X POST "$baseUrl/api/bets/accept-offer" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "requesting_user_id": 1,\n    // "requesting_user_reference": "a1_user_dkjH6xmZzHHHgz5M",  # Optional\n    "accepting_user_id": 2,\n    // "accepting_user_reference": "a1_user_4i0j18x3xN5BkB42",  # Optional\n    "accepting_amount": 300,\n    "maximum_odds": 3,\n    "wager_reference": "wager-4"\n    // "meta": {"data": 12}  # Optional\n  }\'\n  \n# Or using API key authentication\ncurl -X POST "$baseUrl/api/bets/accept-offer" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "requesting_user_id": 1,\n    // "requesting_user_reference": "a1_user_dkjH6xmZzHHHgz5M",  # Optional\n    "accepting_user_id": 2,\n    // "accepting_user_reference": "a1_user_4i0j18x3xN5BkB42",  # Optional\n    "accepting_amount": 300,\n    "maximum_odds": 3,\n    "wager_reference": "wager-4"\n    // "meta": {"data": 12}  # Optional\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const acceptBetOffer = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/bets/accept-offer`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        requesting_user_id: 1,\n        // requesting_user_reference: 'a1_user_dkjH6xmZzHHHgz5M',  // Optional\n        accepting_user_id: 2,\n        // accepting_user_reference: 'a1_user_4i0j18x3xN5BkB42',  // Optional\n        accepting_amount: 300,\n        maximum_odds: 3,\n        wager_reference: 'wager-4'\n        // meta: { data: 12 }  // Optional\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Bet offer accepted:', data);\n  } catch (error) {\n    console.error('Error accepting bet offer:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\nacceptBetOffer(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct AcceptBetOfferRequest {\nrequesting_user_id: Option<u32>,\nrequesting_user_reference: Option<String>,\naccepting_user_id: u32,\naccepting_user_reference: Option<String>,\naccepting_amount: u32,\nmaximum_odds: f32,\nwager_reference: String,\nmeta: Option<serde_json::Value>,\n}\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn accept_bet_offer(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .post(&format!("{}/api/bets/accept-offer", base_url))\n        .header("Content-Type", "application/json");\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let accept_bet_offer_request = AcceptBetOfferRequest {\n        requesting_user_id: Some(1),  // Optional\n        requesting_user_reference: None,  // Optional\n        accepting_user_id: 2,\n        accepting_user_reference: None,  // Optional\n        accepting_amount: 300,\n        maximum_odds: 3.0,\n        wager_reference: "wager-4".to_string(),\n        meta: None,  // Optional\n    };\n\n    let response = request_builder\n        .json(&accept_bet_offer_request)\n        .send()\n        .await?;\n\n    let accept_bet_data = response.json::<serde_json::Value>().await?;\n    println!("Bet offer accepted: {:?}", accept_bet_data);\n\n    Ok(accept_bet_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Accept bet offer with token\n    let auth = AuthMethod::Token(token);\n    let accept_bet_data = accept_bet_offer(&client, baseUrl, &auth).await?;\n\n    // Or accept bet offer with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let accept_bet_data = accept_bet_offer(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful acceptance of the bet offer, the API will respond with the bet details:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"data": [\n  {\n    "bet_id": 1,\n    "requesting_user_reference": "a1_user_FclirLc2MJecJqsi",\n    "requesting_user_id": 1,\n    "accepted_amount": 300,\n    "accepted_odds": 3,\n    "wager_reference": "wager-4",\n    "wager_id": 1\n  }\n],\n"message": "Bet offer accepted successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"flow-of-placing-a-bet-offer-viewing-open-bet-offers-and-accepting-bet-offers",children:"Flow of Placing a Bet Offer, Viewing Open Bet Offers, and Accepting Bet Offers"}),"\n",(0,r.jsx)(n.p,{children:"Here is a visual representation of the flow for placing a bet offer, viewing open bet offers, and accepting bet offers:"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant API\n    Client->>API: POST /api/bets/make-offer/\n    API--\x3e>Client: { "data": { "bet_id": 456, "amount": 500, ... }, "message": "Bet offer made successfully" }\n    Client->>API: GET /api/bets/open/\n    API--\x3e>Client: { "data": [{ "bet_id": 456, "amount": 500, ... }, ...], "message": "Open bets fetched successfully" }\n    Client->>API: POST /api/bets/accept-offer/\n    API--\x3e>Client: { "data": { "bet_id": 456, "amount": 500, ... }, "message": "Bet offer accepted successfully" }'}),"\n",(0,r.jsx)(n.h2,{id:"update-wager-outcome",children:"Update Wager Outcome"}),"\n",(0,r.jsx)(n.p,{children:"To update a wager outcome, you need to send a POST request to our API with the wager reference and the outcome. This request must be authenticated, either by token or API key."}),"\n",(0,r.jsx)(n.h3,{id:"update-wager-outcome-1",children:"Update Wager Outcome"}),"\n",(0,r.jsxs)(n.p,{children:["To update a wager outcome, you need to send a POST request to the ",(0,r.jsx)(n.code,{children:"/api/bets/update-wager-outcome"})," endpoint with the wager reference and the outcome. The\noutcome can be one of the following: ",(0,r.jsx)(n.code,{children:"win"}),", ",(0,r.jsx)(n.code,{children:"loss"}),", ",(0,r.jsx)(n.code,{children:"half-win"}),", ",(0,r.jsx)(n.code,{children:"half-loss"}),", ",(0,r.jsx)(n.code,{children:"push"}),", or ",(0,r.jsx)(n.code,{children:"void"}),"."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X POST "$baseUrl/api/bets/update-wager-outcome" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "reference": "wager-4",\n    "outcome": "half-win"\n  }\'\n  \n# Or using API key authentication\ncurl -X POST "$baseUrl/api/bets/update-wager-outcome" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "reference": "wager-4",\n    "outcome": "half-win"\n  }\'\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const updateWagerOutcome = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/bets/update-wager-outcome`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        reference: 'wager-4',\n        outcome: 'half-win'\n      }),\n    });\n    \n    const data = await response.json();\n    console.log('Wager outcome updated:', data);\n  } catch (error) {\n    console.error('Error updating wager outcome:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\nupdateWagerOutcome(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Serialize)]\nstruct UpdateWagerOutcomeRequest {\nreference: String,\noutcome: String,\n}\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn update_wager_outcome(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .post(&format!("{}/api/bets/update-wager-outcome", base_url))\n        .header("Content-Type", "application/json");\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let update_wager_outcome_request = UpdateWagerOutcomeRequest {\n        reference: "wager-4".to_string(),\n        outcome: "half-win".to_string(),\n    };\n\n    let response = request_builder\n        .json(&update_wager_outcome_request)\n        .send()\n        .await?;\n\n    let update_data = response.json::<serde_json::Value>().await?;\n    println!("Wager outcome updated: {:?}", update_data);\n\n    Ok(update_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Update wager outcome with token\n    let auth = AuthMethod::Token(token);\n    let update_data = update_wager_outcome(&client, baseUrl, &auth).await?;\n\n    // Or update wager outcome with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let update_data = update_wager_outcome(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Upon successful update, the API will respond with a message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"message": "Wager outcome updated successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"get-bet-history",children:"Get Bet History"}),"\n",(0,r.jsx)(n.p,{children:"To get bet history, you need to send a GET request to our API. This request must be authenticated, either by token or API key."}),"\n",(0,r.jsx)(n.h3,{id:"get-bet-history-1",children:"Get Bet History"}),"\n",(0,r.jsxs)(n.p,{children:["To get bet history, you need to send a GET request to the ",(0,r.jsx)(n.code,{children:"/api/bets/history"})," endpoint."]}),"\n",(0,r.jsxs)(A,{groupId:"programming-language",children:[(0,r.jsx)(T,{value:"curl",label:"cURL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Using token authentication\ncurl -X GET "$baseUrl/api/bets/history" \\\n  -H "Authorization: Bearer $token" \\\n  -H "Content-Type: application/json"\n  \n# Or using API key authentication\ncurl -X GET "$baseUrl/api/bets/history" \\\n  -H "Authorization: Basic $base64_encoded" \\\n  -H "Content-Type: application/json"\n'})})}),(0,r.jsx)(T,{value:"javascript",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const getBetHistory = async (auth) => {\n  try {\n    // Determine authentication method\n    let authHeader;\n    if (auth.token) {\n      authHeader = `Bearer ${auth.token}`;\n    } else if (auth.apiKeys) {\n      authHeader = `Basic ${auth.apiKeys.base64_encoded}`;\n    }\n    \n    const response = await fetch(`${baseUrl}/api/bets/history`, {\n      method: 'GET',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    const data = await response.json();\n    console.log('Bet history:', data);\n  } catch (error) {\n    console.error('Error getting bet history:', error);\n  }\n};\n\n// Usage\nconst auth = await getAuthentication();\ngetBetHistory(auth);\n"})})}),(0,r.jsx)(T,{value:"rust",label:"Rust",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use reqwest::Client;\nuse serde::{Deserialize, Serialize};\n\nenum AuthMethod {\nToken(String),\nApiKeys(ApiKeys),\n}\n\nasync fn get_bet_history(client: &Client, base_url: &str, auth: &AuthMethod)\n-> Result<serde_json::Value, Box<dyn std::error::Error>> {\n\n    let mut request_builder = client\n        .get(&format!("{}/api/bets/history", base_url));\n\n    // Apply authentication header\n    match auth {\n        AuthMethod::Token(token) => {\n            request_builder = request_builder.header("Authorization", format!("Bearer {}", token));\n        },\n        AuthMethod::ApiKeys(api_keys) => {\n            request_builder = request_builder.header("Authorization", format!("Basic {}", api_keys.base64_encoded));\n        }\n    }\n\n    let response = request_builder\n        .header("Content-Type", "application/json")\n        .send()\n        .await?;\n\n    let history_data = response.json::<serde_json::Value>().await?;\n    println!("Bet history: {:?}", history_data);\n\n    Ok(history_data)\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet client = Client::new();\n\n    // First get authentication (token or API keys)\n    // ...\n\n    // Get bet history with token\n    let auth = AuthMethod::Token(token);\n    let history_data = get_bet_history(&client, baseUrl, &auth).await?;\n\n    // Or get bet history with API keys\n    // let auth = AuthMethod::ApiKeys(api_keys);\n    // let history_data = get_bet_history(&client, baseUrl, &auth).await?;\n\n    Ok(())\n\n}\n\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The API will respond with the bet history:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n{\n  "id": 1,\n  "requesting_user_id": 1,\n  "requesting_user_reference": "a1_user_FclirLc2MJecJqsi",\n  "accepting_user_id": 2,\n  "accepting_user_reference": "a1_user_oNOxm0ZuRJsgySMZ",\n  "offer_status": "accepted",\n  "effective_amount": 300,\n  "effective_odds": 3,\n  "created_at": "2025-03-06T02:49:52.080Z",\n  "wager": {\n    "id": 1,\n    "reference": "wager-4",\n    "outcome": "half-win",\n    "account_id": 1,\n    "created_at": "2025-03-06T02:49:52.080Z",\n    "updated_at": "2025-03-06T02:54:48.405Z"\n  },\n  "bet_trails": [\n    {\n      "id": 1,\n      "bet_id": 1,\n      "account_id": 1,\n      "wager_id": 1,\n      "offer_status": "requesting",\n      "description": "Requesting for bet",\n      "outcome": "undecided",\n      "requesting_odds": 3,\n      "requesting_amount": 300,\n      "accepting_odds": null,\n      "accepting_amount": null,\n      "effective_odds": null,\n      "effective_amount": null,\n      "created_at": "2025-03-06T02:49:52.080Z",\n      "transactions": []\n    },\n    {\n      "id": 2,\n      "bet_id": 1,\n      "account_id": 1,\n      "wager_id": 1,\n      "offer_status": "accepted",\n      "description": "Bet offer accepted",\n      "outcome": "undecided",\n      "requesting_odds": 3,\n      "requesting_amount": 300,\n      "accepting_odds": 3,\n      "accepting_amount": 300,\n      "effective_odds": null,\n      "effective_amount": null,\n      "created_at": "2025-03-06T02:53:36.773Z",\n      "transactions": []\n    },\n    {\n      "id": 3,\n      "bet_id": 1,\n      "account_id": 1,\n      "wager_id": 1,\n      "offer_status": "accepted",\n      "description": "Bet offer accepted",\n      "outcome": "half-win",\n      "requesting_odds": 3,\n      "requesting_amount": 300,\n      "accepting_odds": 3,\n      "accepting_amount": 300,\n      "effective_odds": null,\n      "effective_amount": null,\n      "created_at": "2025-03-06T02:54:48.403Z",\n      "transactions": [\n        {\n          "id": 2,\n          "account_id": 1,\n          "bet_trail_id": 3,\n          "user_id": 1,\n          "user_reference": "a1_user_FclirLc2MJecJqsi",\n          "reference": "TX_-6EaRcGbweZFLlvy-FqYsjBd_9SGbw2chQqswJNNi1Vf0v0m",\n          "amount": 300,\n          "description": "Won 300 from wager wager-4",\n          "transaction_type": "credit",\n          "transaction_source": "bet",\n          "created_at": "2025-03-06T02:54:48.403Z"\n        },\n        {\n          "id": 3,\n          "account_id": 1,\n          "bet_trail_id": 3,\n          "user_id": 2,\n          "user_reference": "a1_user_oNOxm0ZuRJsgySMZ",\n          "reference": "TX_fWFFLUU8T1mRDvP60U5YZDtMK-r8yaU1Oh11976vMWoLn8h4",\n          "amount": 300,\n          "description": "Lost 300 on wager wager-4",\n          "transaction_type": "debit",\n          "transaction_source": "bet",\n          "created_at": "2025-03-06T02:54:48.403Z"\n        }\n      ]\n    }\n  ]\n}\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"flow-of-updating-wager-outcome-and-getting-bet-history",children:"Flow of Updating Wager Outcome and Getting Bet History"}),"\n",(0,r.jsx)(n.p,{children:"Here is a visual representation of the flow for updating a wager outcome and getting bet history:"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant API\n    Client->>API: POST /api/bets/update-wager-outcome\n    API--\x3e>Client: { "message": "Wager outcome updated successfully" }\n    Client->>API: GET /api/bets/history\n    API--\x3e>Client: { "data": [{ "id": 1, "requesting_user_id": 1, ... }], "message": "Bet history fetched successfully" }'})]})}function I(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(U,{...e})}):U(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);